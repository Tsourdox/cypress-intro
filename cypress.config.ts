import { defineConfig } from "cypress";
import { MongoMemoryReplSet } from "mongodb-memory-server";
import waitOn from "wait-on";

export default defineConfig({
  e2e: {
    baseUrl: "http://localhost:3100", // 游녣 s친 cypress bes칬ker r칛tt port
    async setupNodeEvents(on) {
      // 1) Starta in-memory MongoDB
      const db = await MongoMemoryReplSet.create(); // 游녣 med replica-set s친 Prisma fungerar.
      const dbUri = db.getUri("testing");
      process.env.DATABASE_URL = dbUri; // 游녣 f칬r db-anslutning i denna processen (punkt 5)

      // 2) Starta Next.js servern i en ny process
      const { $ } = await import("execa"); // 游녣 dynamisk import s친 esm fungerar
      const server = $({
        env: { ...process.env, NODE_ENV: "test", DATABASE_URL: dbUri },
        stdio: "inherit",
      })`npx next dev -p 3100 --turbopack`;

      // 3) St칛da upp MongoDB och Next.js processerna
      const cleanup = () => {
        server.kill();
        db.stop();
      };
      process.on("SIGINT", cleanup); // 游녣 om cypress kraschar
      process.on("SIGTERM", cleanup); // 游녣 om cypress kraschar
      process.on("exit", cleanup); // 游녣 n칛r cypress avslutas
      on("after:run", cleanup); // 游녣 n칛r cypress avslutas

      // 4) V칛nta tills Next.js-servern 칛r redo
      await waitOn({ resources: ["http://localhost:3100/"], timeout: 30_000 });

      // 5a) 칀terst칛ll databasen innan varje testfil k칬rs
      on("before:spec", async () => {
        // 游녢 dynamisk import s친 r칛tt db-url anv칛nds (se punkt 1)
        const { seedDatabase } = await import("./prisma/seed/seed-db");
        await seedDatabase({ drop: true });
      });

      // 5b) Skapa en task f칬r att 친terst칛lla databasen innan varje it-test k칬rs
      on("task", {
        async reseed() {
          // 游녢 dynamisk import s친 r칛tt db-url anv칛nds (se punkt 1)
          const { seedDatabase } = await import("./prisma/seed/seed-db");
          await seedDatabase({ drop: true });
          return null;
        },
      });
    },
  },
});
